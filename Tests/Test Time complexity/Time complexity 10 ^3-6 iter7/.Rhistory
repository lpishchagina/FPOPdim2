library(FPOPdim2)
#devtools::install_github("lpishchagina/OptPartitioning2D")
library(OptPartitioning2D)
library(base)
library(rstream)
library(simEd)
library(iterators)
library(stats)
library(foreach)
library(doParallel)
set.seed(199)
###############################
#          Cluster            #
###############################
cores = detectCores()
cl <- makeCluster(cores[1]-1) #7
registerDoParallel(cl)
nb.simu <- 7
one.simu.op <- function(data, penalty, type, func = "OptPart2D")
{
if(type == "null"){t <- system.time(OptPart2D(data[1,],data[2,], penalty, type = "null"))[[1]]}
if(type == "pruning"){t <- system.time(OptPart2D(data[1,],data[2,],penalty, type = "pruning"))[[1]]}
return(t)
}
###############################
#    Function one.simu.fpop   #
###############################
#The function returns the runtime of the algorithm for one simulation
#type = 1 - FPOP: only intersection, approximation of intersection = rectangle
#type = 2 - FPOP: intersection and exclusion, approximation of intersection and exclusion = rectangle
#type = 3 - FPOP: only exclusion, approximation -  disk
one.simu.fpop  <- function(data, penalty, type, func = "FPOP2D")
{
if (type == 1){t <- system.time(FPOP2D(data[1,],data[2,], penalty, type = 1))[[1]]}
if (type == 2){t <- system.time(FPOP2D(data[1,],data[2,], penalty, type = 2))[[1]]}
if (type == 3){t <- system.time(FPOP2D(data[1,],data[2,], penalty, type = 3))[[1]]}
return(t)
}
length.simu <-NULL
nb.iter <- 4
for (i in 1:nb.iter) length.simu <- c(length.simu, 10^(i+2))
###############################
tab.PELT <- data.frame(matrix(0, nb.iter, nb.simu + 1))
colnames(tab.PELT) <- c("n", paste0("Rep",1:nb.simu))
tab.FPOP1 <- data.frame(matrix(0, nb.iter, nb.simu + 1))
colnames(tab.FPOP1) <- c("n", paste0("Rep",1:nb.simu))
tab.FPOP3 <- data.frame(matrix(0, nb.iter, nb.simu + 1))
colnames(tab.FPOP3) <- c("n", paste0("Rep",1:nb.simu))
mu1 <- 0
mu2 <- 0
sigma <- 1
res.nb.simu <- NULL
###############################
#    tables filling PELT      #
###############################
for(i in 1:length(length.simu)){
n <- length.simu[i]
penalty <- 2*log(n)
res.nb.simu <- foreach(i = 1:nb.simu, .combine = c, .packages = c("rstream", "FPOPdim2", "OptPartitioning2D")) %dopar% {one.simu.op(data = data_gen2D(n, n, mu1, mu2, sigma), penalty, type = "pruning", func = "OptPart2D")}
tab.PELT[i,] <- c(n, res.nb.simu)
}
###############################
#    time complexity PELT     #
###############################
mean.PELT <- rowMeans(tab.PELT[,-1])
write.table(tab.PELT, "Table Time complexity PELT 10^3-6 iter7.txt" )
write.table(mean.PELT, "Time complexity PELT 10^3-6 iter7.txt", row.names = FALSE, col.names = FALSE  )
###############################
#  Plot:time complexity PELT  #
###############################
png(filename = "Plot log10 Time complexity PELT 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.PELT), xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "PELT: Time complexity", col = "orchid3")
lines(log10(length.simu), log10(mean.PELT), col = "orchid3", lwd = 3)
dev.off()
###############################
#    tables filling FPOP3     #
###############################
for(i in 1:length(length.simu)){
n <- length.simu[i]
penalty <- 2*log(n)
res.nb.simu <- foreach(i = 1:nb.simu, .combine = c, .packages=c("rstream","FPOPdim2","OptPartitioning2D")) %dopar% {one.simu.fpop(data = data_gen2D(n, n, mu1, mu2, sigma), penalty, type = 3, func = "FPOP2D")}
tab.FPOP3[i,] <- c(n, res.nb.simu)
}
###############################
#    time complexity FPOP3    #
###############################
mean.FPOP3 <- rowMeans(tab.FPOP3[,-1])
write.table(tab.FPOP3, "Table Time complexity FPOP3 10^3-6 iter7.txt" )
write.table(mean.FPOP3, "Time complexity FPOP3 10^3-6 iter7.txt", row.names = FALSE, col.names = FALSE)
###############################
#  Plot:time complexity FPOP3 #
###############################
png(filename = "Plot log10 Time complexity FPOP3 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.FPOP3), xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "FPOP3: Time complexity", col = "purple3")
lines(log10(length.simu), log10(mean.FPOP3), col="purple3", lwd = 3)
dev.off()
###############################
#    time complexity FPOP1    #
###############################
mean.FPOP1 <- rowMeans(tab.FPOP1[,-1])
write.table(tab.FPOP1, "Table Time complexity FPOP1 10^3-6 iter7.txt" )
write.table(mean.FPOP1, "Time complexity FPOP1 10^3-6 iter7.txt", row.names = FALSE, col.names = FALSE)
###############################
#  Plot:time complexity FPOP1 #
###############################
png(filename = "Plot log10 Time complexity FPOP1 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.FPOP1), xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "FPOP1: Time complexity", col = "skyblue3")
lines(log10(length.simu), log10(mean.FPOP1), col = "skyblue3", lwd = 3)
dev.off()
###############################
#  Plot:time complexity       #
###############################
min_lgy = min(log10(mean.FPOP1),log10(mean.FPOP2), log10(mean.FPOP3), log10(mean.OP),log10(mean.PELT))
max_lgy = max(log10(mean.FPOP1),log10(mean.FPOP2), log10(mean.FPOP3), log10(mean.OP),log10(mean.PELT))
min_lgx = min(log10(length.simu))
max_lgx = max(log10(length.simu))
png(filename = "Plot log10 Time complexity Comparison 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.FPOP1), col = "skyblue3", xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "Time complexity", ylim = c(min_lgy, max_lgy), xlim = c(min_lgx, max_lgx))
lines(log10(length.simu), log10(mean.FPOP1), col="skyblue3", lwd = 3)
points(log10(length.simu), log10(mean.FPOP3), col = "purple3")
lines(log10(length.simu), log10(mean.FPOP3), col="purple3", lwd = 3)
points(log10(length.simu), log10(mean.OP), col = "palevioletred3")
lines(log10(length.simu), log10(mean.OP), col="palevioletred3", lwd = 3)
points(log10(length.simu), log10(mean.PELT), col = "orchid3")
lines(log10(length.simu), log10(mean.PELT), col= "orchid3", lwd = 3)
points(log10(length.simu), log10(mean.FPOP2), col = "royalblue3")
lines(log10(length.simu), log10(mean.FPOP2), col="royalblue3", lwd = 3)
###############################
#       legend                #
###############################
location = "topleft"
labels = c("OP","PELT", "FPOP1", "FPOP2", "FPOP3")
colors = c("palevioletred3", "orchid3","skyblue3","royalblue3", "purple3")
legend(location, labels, fill = colors)
dev.off()
###############################
#  stop cluster               #
###############################
#stop cluster
stopCluster(cl)
tab.FPOP1
###############################
#    tables filling FPOP1     #
###############################
for(i in 1:length(length.simu)){
n <- length.simu[i]
penalty <- 2*log(n)
res.nb.simu <- foreach(i = 1:nb.simu, .combine = c, .packages=c("rstream", "FPOPdim2", "OptPartitioning2D")) %dopar% {one.simu.fpop(data = data_gen2D(n, n, mu1, mu2, sigma), penalty, type = 1, func = "FPOP2D")}
tab.FPOP1[i,] <- c(n, res.nb.simu)
}
###############################
#    time complexity FPOP1    #
###############################
mean.FPOP1 <- rowMeans(tab.FPOP1[,-1])
write.table(tab.FPOP1, "Table Time complexity FPOP1 10^3-6 iter7.txt" )
write.table(mean.FPOP1, "Time complexity FPOP1 10^3-6 iter7.txt", row.names = FALSE, col.names = FALSE)
###############################
#  Plot:time complexity FPOP1 #
###############################
png(filename = "Plot log10 Time complexity FPOP1 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.FPOP1), xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "FPOP1: Time complexity", col = "skyblue3")
lines(log10(length.simu), log10(mean.FPOP1), col = "skyblue3", lwd = 3)
dev.off()
library(FPOPdim2)
#devtools::install_github("lpishchagina/OptPartitioning2D")
library(OptPartitioning2D)
library(base)
library(rstream)
library(simEd)
library(iterators)
library(stats)
library(foreach)
library(doParallel)
set.seed(199)
###############################
#          Cluster            #
###############################
cores = detectCores()
cl <- makeCluster(cores[1]-1) #7
registerDoParallel(cl)
nb.simu <- 7
one.simu.op <- function(data, penalty, type, func = "OptPart2D")
{
if(type == "null"){t <- system.time(OptPart2D(data[1,],data[2,], penalty, type = "null"))[[1]]}
if(type == "pruning"){t <- system.time(OptPart2D(data[1,],data[2,],penalty, type = "pruning"))[[1]]}
return(t)
}
###############################
#    Function one.simu.fpop   #
###############################
#The function returns the runtime of the algorithm for one simulation
#type = 1 - FPOP: only intersection, approximation of intersection = rectangle
#type = 2 - FPOP: intersection and exclusion, approximation of intersection and exclusion = rectangle
#type = 3 - FPOP: only exclusion, approximation -  disk
one.simu.fpop  <- function(data, penalty, type, func = "FPOP2D")
{
if (type == 1){t <- system.time(FPOP2D(data[1,],data[2,], penalty, type = 1))[[1]]}
if (type == 2){t <- system.time(FPOP2D(data[1,],data[2,], penalty, type = 2))[[1]]}
if (type == 3){t <- system.time(FPOP2D(data[1,],data[2,], penalty, type = 3))[[1]]}
return(t)
}
######################################################################
###############################
#         data length         #
###############################
length.simu <-NULL
nb.iter <- 4
for (i in 1:nb.iter) length.simu <- c(length.simu, 10^(i+2))
tab.FPOP1 <- data.frame(matrix(0, nb.iter, nb.simu + 1))
colnames(tab.FPOP1) <- c("n", paste0("Rep",1:nb.simu))
###############################
#       tables filling        #
###############################
mu1 <- 0
mu2 <- 0
sigma <- 1
res.nb.simu <- NULL
###############################
#    tables filling FPOP1     #
###############################
for(i in 1:length(length.simu)){
n <- length.simu[i]
penalty <- 2*log(n)
res.nb.simu <- foreach(i = 1:nb.simu, .combine = c, .packages=c("rstream", "FPOPdim2", "OptPartitioning2D")) %dopar% {one.simu.fpop(data = data_gen2D(n, n, mu1, mu2, sigma), penalty, type = 1, func = "FPOP2D")}
tab.FPOP1[i,] <- c(n, res.nb.simu)
}
###############################
#    time complexity FPOP1    #
###############################
mean.FPOP1 <- rowMeans(tab.FPOP1[,-1])
write.table(tab.FPOP1, "Table Time complexity FPOP1 10^3-6 iter7.txt" )
write.table(mean.FPOP1, "Time complexity FPOP1 10^3-6 iter7.txt", row.names = FALSE, col.names = FALSE)
###############################
#  Plot:time complexity FPOP1 #
###############################
png(filename = "Plot log10 Time complexity FPOP1 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.FPOP1), xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "FPOP1: Time complexity", col = "skyblue3")
lines(log10(length.simu), log10(mean.FPOP1), col = "skyblue3", lwd = 3)
dev.off()
mean.FPOP1
mean.FPOP3
mean.PELT
mean.OP
mean.OP = c(0.00571428571428585, 0.77, 101.047142857143, 10070.0114285714)
mean.FPOP2 = c(0.00428571428571429, 0.0628571428571429, 0.638571428571428, 7.78428571428571)
min_y = min(mean.FPOP1, mean.FPOP2, mean.FPOP3, mean.OP, mean.PELT)
max_y = max(mean.FPOP1, mean.FPOP2, mean.FPOP3, mean.OP, mean.PELT)
min_x = min(length.simu)
max_x = max(length.simu)
min_x
png(filename = "Plot Time complexity Comparison 10^3-6.png",  width = 1500, height = 1000)
plot(length.simu, mean.FPOP1, col = "skyblue3", xlab = "data length", ylab = "mean time in second", main = "Time complexity", ylim = c(min_y, max_y), xlim = c(min_x, max_x))
lines(length.simu, mean.FPOP1, col="skyblue3", lwd = 3)
points(length.simu, mean.FPOP3, col = "purple3")
lines(length.simu, mean.FPOP3, col="purple3", lwd = 3)
points(length.simu, mean.OP, col = "palevioletred3")
lines(length.simu, mean.OP, col="palevioletred3", lwd = 3)
points(length.simu, mean.PELT, col = "orchid3")
lines(length.simu, mean.PELT, col= "orchid3", lwd = 3)
points(length.simu, mean.FPOP2, col = "royalblue3")
lines(length.simu, mean.FPOP2, col="royalblue3", lwd = 3)
###############################
#       legend                #
###############################
location = "topleft"
labels = c("OP","PELT", "FPOP1", "FPOP2", "FPOP3")
colors = c("palevioletred3", "orchid3","skyblue3","royalblue3", "purple3")
legend(location, labels, fill = colors)
dev.off()
min_lgy = min(log10(mean.FPOP1),log10(mean.FPOP2), log10(mean.FPOP3), log10(mean.OP),log10(mean.PELT))
max_lgy = max(log10(mean.FPOP1),log10(mean.FPOP2), log10(mean.FPOP3), log10(mean.OP),log10(mean.PELT))
min_lgx = min(log10(length.simu))
max_lgx = max(log10(length.simu))
png(filename = "Plot log10 Time complexity Comparison 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), log10(mean.FPOP1), col = "skyblue3", xlab = "lg(data length)", ylab = "lg(mean time in second)",  main = "Time complexity", ylim = c(min_lgy, max_lgy), xlim = c(min_lgx, max_lgx))
lines(log10(length.simu), log10(mean.FPOP1), col="skyblue3", lwd = 3)
points(log10(length.simu), log10(mean.FPOP3), col = "purple3")
lines(log10(length.simu), log10(mean.FPOP3), col="purple3", lwd = 3)
points(log10(length.simu), log10(mean.OP), col = "palevioletred3")
lines(log10(length.simu), log10(mean.OP), col="palevioletred3", lwd = 3)
points(log10(length.simu), log10(mean.PELT), col = "orchid3")
lines(log10(length.simu), log10(mean.PELT), col= "orchid3", lwd = 3)
points(log10(length.simu), log10(mean.FPOP2), col = "royalblue3")
lines(log10(length.simu), log10(mean.FPOP2), col="royalblue3", lwd = 3)
###############################
#       legend                #
###############################
location = "topleft"
labels = c("OP","PELT", "FPOP1", "FPOP2", "FPOP3")
colors = c("palevioletred3", "orchid3","skyblue3","royalblue3", "purple3")
legend(location, labels, fill = colors)
dev.off()
plot(log10(length.simu), mean.FPOP1, col = "skyblue3", xlab = "lg(data length)", ylab = "mean time in second",  main = "Time complexity", ylim = c(min_y, max_y), xlim = c(min_lgx, max_lgx))
lines(log10(length.simu), mean.FPOP1, col="skyblue3", lwd = 3)
points(log10(length.simu), mean.FPOP3, col = "purple3")
lines(log10(length.simu), mean.FPOP3, col="purple3", lwd = 3)
points(log10(length.simu), mean.OP, col = "palevioletred3")
lines(log10(length.simu), mean.OP, col="palevioletred3", lwd = 3)
points(log10(length.simu), mean.PELT, col = "orchid3")
lines(log10(length.simu), mean.PELT, col= "orchid3", lwd = 3)
points(log10(length.simu), mean.FPOP2, col = "royalblue3")
lines(log10(length.simu), mean.FPOP2, col="royalblue3", lwd = 3)
###############################
#       legend                #
###############################
location = "topleft"
labels = c("OP","PELT", "FPOP1", "FPOP2", "FPOP3")
colors = c("palevioletred3", "orchid3","skyblue3","royalblue3", "purple3")
legend(location, labels, fill = colors)
png(filename = "Plot log-mean Time complexity Comparison 10^3-6 iter7.png",  width = 1500, height = 1000)
plot(log10(length.simu), mean.FPOP1, col = "skyblue3", xlab = "lg(data length)", ylab = "mean time in second",  main = "Time complexity", ylim = c(min_y, max_y), xlim = c(min_lgx, max_lgx))
lines(log10(length.simu), mean.FPOP1, col="skyblue3", lwd = 3)
points(log10(length.simu), mean.FPOP3, col = "purple3")
lines(log10(length.simu), mean.FPOP3, col="purple3", lwd = 3)
points(log10(length.simu), mean.OP, col = "palevioletred3")
lines(log10(length.simu), mean.OP, col="palevioletred3", lwd = 3)
points(log10(length.simu), mean.PELT, col = "orchid3")
lines(log10(length.simu), mean.PELT, col= "orchid3", lwd = 3)
points(log10(length.simu), mean.FPOP2, col = "royalblue3")
lines(log10(length.simu), mean.FPOP2, col="royalblue3", lwd = 3)
###############################
#       legend                #
###############################
location = "topleft"
labels = c("OP","PELT", "FPOP1", "FPOP2", "FPOP3")
colors = c("palevioletred3", "orchid3","skyblue3","royalblue3", "purple3")
legend(location, labels, fill = colors)
dev.off()
library(OptPartitioning2D)
#devtools::install_github("lpishchagina/FPOPdim2")
library(FPOPdim2)
library(base)
library(rstream)
library(simEd)
library(microbenchmark)
library("ggplot2")
###############################
#     Function one.simu.op    #
###############################
#The function returns the runtime of the algorithm for one simulation
#type = "null" - Optimal Partitioning
#type = "pruning" - PELT
one.simu.op <- function(data1, data2, penalty, type, func = "OptPart2D")
{
if(type == "null"){t <- system.time(OptPart2D(data1, data2, penalty, type = "null"))[[1]]}
if(type == "pruning"){t <- system.time(OptPart2D(data1, data2, penalty, type = "pruning"))[[1]]}
return(t)
}
###############################
#    Function one.simu.fpop   #
###############################
#The function returns the runtime of the algorithm for one simulation
#type = 1 - FPOP: only intersection, approximation of intersection = rectangle
#type = 2 - FPOP: intersection and exclusion, approximation of intersection and exclusion = rectangle
#type = 3 - FPOP: only exclusion, approximation -  disk
one.simu.fpop  <- function(data1, data2, penalty, type, func = "FPOP2D")
{
if (type == 1){t <- system.time(FPOP2D(data1, data2, penalty, type = 1))[[1]]}
if (type == 2){t <- system.time(FPOP2D(data1, data2, penalty, type = 2))[[1]]}
if (type == 3){t <- system.time(FPOP2D(data1, data2, penalty, type = 3))[[1]]}
return(t)
}
######################################################################
#                                data generation                     #
#                           The data without changepoints            #
######################################################################
##############################
#parameters mu1, mu2, sigma  #
#       (by default)         #
##############################
mu1 <- 0
mu2 <- 0
sigma <- 1
##############################
n <- 1000
##############################
chp <- n
penalty <- 2*sigma*log(n)
set.seed(21)
data <- data_gen2D(n, chp, mu1, mu2, sigma)
write.table(data, paste("data", n,".txt"),sep = " ", eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = FALSE)
#data[1,1] [1] 0.7930132
###############################
#           Algorithm         #
###############################
resOP <- OptPart2D(data[1,], data[2,], penalty, type = "null")
resPELT <- OptPart2D(data[1,], data[2,], penalty, type = "pruning")
#$changepoints		$means1				$means2				$globalCost
#[1] 1000			[1] 0.07820922 		[1] 0.01483164		[1] 1996.968
resFPOP1 <- FPOP2D(data[1,], data[2,], penalty, type = 1)
resFPOP2 <- FPOP2D(data[1,], data[2,], penalty, type = 2)
resFPOP3 <- FPOP2D(data[1,], data[2,], penalty, type = 3)
#$1000		0.07820922 		 0.01483164		 -13.81551
###############################
#The data without changepoints#
#The runtime One simulation   #
###############################
one.runtimeOP <- one.simu.op(data[1,], data[2,], penalty, type = "null", func = "OptPart2D")
one.runtimePELT <- one.simu.op(data[1,], data[2,], penalty, type = "pruning", func = "OptPart2D")
one.runtimeFPOP1 <- one.simu.fpop(data[1,], data[2,], penalty, type = 1, func = "FPOP2D")
one.runtimeFPOP2 <- one.simu.fpop(data[1,], data[2,], penalty, type = 2, func = "FPOP2D")
one.runtimeFPOP3 <- one.simu.fpop(data[1,], data[2,], penalty, type = 3, func = "FPOP2D")
###############################
#       microbenchmark        #
###############################
res.microbenchmark <- microbenchmark(one.simu.op(data[1,], data[2,], penalty, type = "null", func = "OptPart2D"), one.simu.op(data[1,], data[2,], penalty, type = "pruning", func = "OptPart2D" ), one.simu.fpop(data[1,], data[2,], penalty, type = 1, func = "FPOP2D"),one.simu.fpop(data[1,], data[2,], penalty, type = 2, func = "FPOP2D"),one.simu.fpop(data[1,], data[2,], penalty, type = 3, func = "FPOP2D"), times = 10)
#
res.microbenchmark
autoplot(res.microbenchmark)
autoplot(res.microbenchmark, rownames.label = c("OP", "PELT", "FPOP1","FPOP2", "FPOP3"))
autoplot(res.microbenchmark, colnames.label = c("OP", "PELT", "FPOP1","FPOP2", "FPOP3"))
res.microbenchmark <- microbenchmark("OP" = one.simu.op(data[1,], data[2,], penalty, type = "null", func = "OptPart2D"), one.simu.op(data[1,], data[2,], penalty, type = "pruning", func = "OptPart2D" ), one.simu.fpop(data[1,], data[2,], penalty, type = 1, func = "FPOP2D"),one.simu.fpop(data[1,], data[2,], penalty, type = 2, func = "FPOP2D"),one.simu.fpop(data[1,], data[2,], penalty, type = 3, func = "FPOP2D"), times = 10)
autoplot(res.microbenchmark )
###############################
#       microbenchmark        #
###############################
res.microbenchmark <- microbenchmark("OP" =one.simu.op(data[1,], data[2,], penalty, type = "null", func = "OptPart2D"), "PELT"= one.simu.op(data[1,], data[2,], penalty, type = "pruning", func = "OptPart2D" ), "FPOP1"= one.simu.fpop(data[1,], data[2,], penalty, type = 1, func = "FPOP2D"), "FPOP2" = one.simu.fpop(data[1,], data[2,], penalty, type = 2, func = "FPOP2D"), "FPOP3" = one.simu.fpop(data[1,], data[2,], penalty, type = 3, func = "FPOP2D"), times = 10)
res.microbenchmark <- microbenchmark("OP" =one.simu.op(data[1,], data[2,], penalty, type = "null", func = "OptPart2D"), "PELT"= one.simu.op(data[1,], data[2,], penalty, type = "pruning", func = "OptPart2D" ), "FPOP1"= one.simu.fpop(data[1,], data[2,], penalty, type = 1, func = "FPOP2D"), "FPOP2" = one.simu.fpop(data[1,], data[2,], penalty, type = 2, func = "FPOP2D"), "FPOP3" = one.simu.fpop(data[1,], data[2,], penalty, type = 3, func = "FPOP2D"), times = 10)
#
autoplot(res.microbenchmark)
autoplot(res.microbenchmark, colors = blue)
autoplot(res.microbenchmark, colors = "blue")
autoplot(res.microbenchmark, colour = "blue")
autoplot(res.microbenchmark+scale_color_gradient(low="blue", high="red"))
x = autoplot(res.microbenchmark)
x+scale_fill_gradient(low="blue", high="red")
x = autoplot(res.microbenchmark)
x = autoplot(res.microbenchmark)
###############################
#       microbenchmark        #
###############################
res.microbenchmark <- microbenchmark("OP" =one.simu.op(data[1,], data[2,], penalty, type = "null", func = "OptPart2D"), "PELT"= one.simu.op(data[1,], data[2,], penalty, type = "pruning", func = "OptPart2D" ), "FPOP1"= one.simu.fpop(data[1,], data[2,], penalty, type = 1, func = "FPOP2D"), "FPOP2" = one.simu.fpop(data[1,], data[2,], penalty, type = 2, func = "FPOP2D"), "FPOP3" = one.simu.fpop(data[1,], data[2,], penalty, type = 3, func = "FPOP2D"), times = 10)
x = autoplot(res.microbenchmark)
autoplot(res.microbenchmark)
ggpot2(res.microbenchmark)
ggplot2(res.microbenchmark)
library("ggplot2")
library(microbenchmark)
ggplot2(res.microbenchmark)
ggplot(res.microbenchmark)
ggplot(res.microbenchmark)
autoplot(res.microbenchmark)
autoplot(res.microbenchmark, color="purple",
fill="#69b3a2",
size=2 )
autoplot(res.microbenchmark+color="purple",
fill="#69b3a2",
size=2 )
autoplot(res.microbenchmark )+(color="purple",
fill="#69b3a2",
size=2)
autoplot(res.microbenchmark, ts.colour = "blue", size = 2)
autoplot(res.microbenchmark, ts.colour = "blue", size = 2)
colnames.label = c("OP", "PELT", "FPOP1","FPOP2", "FPOP3")
autoplot(res.microbenchmark, ts.colour = "blue", size = 2)
